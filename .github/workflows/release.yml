name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.payload.inputs?.tag || context.ref.replace('refs/tags/', '');
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Simple STT ${tag}`,
              body: `Release ${tag}`,
              draft: false,
              prerelease: tag.includes('-'),
            });
            return release.data.id;

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: simple-stt-linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: simple-stt-linux-x86_64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: simple-stt-linux-aarch64

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            sudo apt-get install -y musl-tools
          fi

      - name: Configure cross-compilation (aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        run: |
          cp target/${{ matrix.target }}/release/simple-stt ${{ matrix.name }}
          strip ${{ matrix.name }} || true
          chmod +x ${{ matrix.name }}

      - name: Generate checksums
        run: |
          sha256sum ${{ matrix.name }} > ${{ matrix.name }}.sha256

      - name: Upload binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream

      - name: Upload checksum to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}.sha256
          asset_name: ${{ matrix.name }}.sha256
          asset_content_type: text/plain

  update-release:
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update release notes
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.payload.inputs?.tag || context.ref.replace('refs/tags/', '');
            const releaseId = ${{ needs.create-release.outputs.release_id }};

            // Generate release notes
            const releaseNotes = `# Simple STT ${tag}

            A Wayland-native speech-to-text client with PipeWire integration for modern Linux desktops.

            ## Features
            - üé§ Local and cloud-based Whisper transcription
            - üåä Wayland-native clipboard support (wl-clipboard)
            - üîÑ Real-time audio processing with PipeWire
            - ‚ö° Parallel model loading for faster startup
            - üéØ Intelligent silence detection with auto-tuning
            - üìù Multiple output options (clipboard/stdout/auto-paste)
            - üè† Privacy-focused local processing by default

            ## System Requirements
            - **Wayland compositor** (Hyprland, Sway, GNOME, KDE, etc.)
            - **PipeWire** for audio (standard on modern Linux)
            - **wl-clipboard** for clipboard operations

            ## Downloads

            Choose the appropriate binary for your Linux system:

            - **x86_64 (glibc)**: \`simple-stt-linux-x86_64\`
              - Most Linux distributions (Ubuntu, Fedora, Debian, Arch, openSUSE, etc.)
            - **x86_64 (musl)**: \`simple-stt-linux-x86_64-musl\`
              - Alpine Linux, static binary, minimal dependencies
            - **aarch64**: \`simple-stt-linux-aarch64\`
              - ARM64 Linux (Raspberry Pi 4+, Pine64, other ARM64 systems)

            ## Quick Installation

            \`\`\`bash
            # Download and install (replace with your architecture)
            wget https://github.com/${{ github.repository }}/releases/download/${tag}/simple-stt-linux-x86_64
            chmod +x simple-stt-linux-x86_64
            sudo mv simple-stt-linux-x86_64 /usr/local/bin/simple-stt

            # Verify installation
            simple-stt --check-config
            \`\`\`

            ## Verification

            Each binary includes a SHA256 checksum file. Verify your download:
            \`\`\`bash
            # Download checksum file
            wget https://github.com/${{ github.repository }}/releases/download/${tag}/simple-stt-linux-x86_64.sha256

            # Verify integrity
            sha256sum -c simple-stt-linux-x86_64.sha256
            \`\`\`

            ## Distribution Packages

            ### Arch Linux (AUR)
            \`\`\`bash
            # Install from AUR (if available)
            yay -S simple-stt-rs
            \`\`\`

            ### Manual Installation
            For other distributions, use the pre-built binaries above or build from source.

            ## Usage

            \`\`\`bash
            # Basic usage (clipboard output)
            simple-stt

            # Output to stdout
            simple-stt --stdout

            # Check configuration
            simple-stt --check-config

            # Tune audio settings
            simple-stt --tune
            \`\`\`

            For full documentation and configuration options, visit the [README](https://github.com/${{ github.repository }}/blob/main/README.md).`;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: releaseNotes
            });
